Задание 2

Анализ задания 1 и список уточняющих вопросов для менеджера:

1. Поддерживаются ли альтернативные форматы файлов кроме .xlsx (например, .ods, .csv)? Если нет — планируется ли их поддержка в будущем?
(Дополнительно был реализован импорт файлов в формате .ods, т.к. некоторые пользователи могут использовать LibreOffice. Была добавлена проверка MIME-типа и расширений, а парсер адаптирован к чтению как .xlsx, так и .ods через единый интерфейс. Это повышает гибкость системы и снижает вероятность ошибок загрузки.)
2. Нужно ли сохранять оригинальные файлы после импорта (например, для аудита или повторного анализа)?
3. Нужно ли предоставлять пользователю возможность скачать отчет об ошибках (например, через GET /import/errors/:jobId)?
4. Какие поля считаются обязательными? Возможны ли nullable-поля или дефолтные значения?
6. Необходима ли аутентификация для использования импорт-сервиса? Кто может запускать импорт?
7. Есть ли требования к логированию — например, писать действия в базу или в файл?
8. Каков лимит по объему загружаемого файла (размер, строки)?
9. Нужно ли уведомлять пользователя об окончании импорта через WebSocket, email или push-уведомление?
10. Как долго должны храниться данные в Redis (TTL)? Нужно ли реализовать очистку устаревших job-ключей?

Упрощённая постановка задачи для джуниора:

Реализовать REST API, обеспечивающее асинхронный импорт Excel-файлов с базовой валидацией и сохранением валидных строк в базу данных.

Функциональность:
- Загрузка Excel-файла через endpoint /import
- Парсинг каждой строки Excel-файла с ожиданием полей: id, name, date
- Валидация:
  - id должен быть положительным целым числом
  - name — непустая строка
  - date — дата в одном из форматов: DD.MM.YYYY, DD/MM/YYYY или DD-MM-YYYY; не ранее 1900 года и не в будущем
- Валидные строки сохраняются в БД
- Ошибки валидации записываются в result.txt и Redis
- Прогресс выполнения хранится в Redis
- API для мониторинга:
  - GET /import/status/:jobId
  - GET /import/errors/:jobId
  - GET /import/jobs
  - POST /import/cancel/:jobId
  - DELETE /import/:jobId
  - GET /rows/grouped-by-date

Логика упрощена до задач, которые джуниор способен реализовать последовательно. При этом архитектура масштабируема и допускает расширение.