Задание 3

Архитектура и причины технических решений:

1. Почему выбран именно exceljs:
   - Поддерживает потоковую обработку файлов (через `WorkbookReader`)
   - Не требует загрузки всего файла в память
   - Устойчив к большим файлам (до 60k+ строк)
   - Прост в использовании и активно поддерживается

2. Логика валидации:
   - Используется dayjs(..., format, true) для строгого парсинга
   - Обрабатываются нестандартные форматы (`DD.MM.YYYY`, DD/MM/YYYY, `DD-MM-YYYY`)
   - Отклоняются даты:
     - С некорректным месяцем (например, `11.13.1991`)
     - В будущем
     - До 1900-01-01
   - ID должен быть:
     - Целым положительным числом
     - Без пробелов
   - name — непустая строка

3. Производительность и масштабируемость:
   - Потоковый парсинг Excel — не нагружает память
   - Пакетная запись валидных строк в БД по 1000 (batch insert) — снижает число запросов
   - Прогресс трекается через Redis (`setProgress`) и может быть отправлен на фронт через Socket.IO
   - Ошибки сразу пишутся в Redis (list) + финальный файл result-<jobId>.txt
   - Возможность отмены задачи через ключ import:job:<id>:abort

4. Устойчивость при увеличении объема данных:
   Да, решение не зависит от размера файла:
   - Память не перегружается (стриминг)
   - Redis масштабируется горизонтально
   - Валидация и запись выполняются с контролем прогресса
   - При росте нагрузки легко вынести в очередь (BullMQ) и масштабировать обработку воркерами

5. Что можно улучшить:
   - Вынести обработку импорта в отдельную очередь (BullMQ или RabbitMQ)
   - Добавить retry-логику при ошибках сохранения
   - Хранить файлы в S3 или хранилище вместо временной директории
   - Поддержка нескольких форматов
   - Вынести настройки (batchSize, ttl, допустимые форматы) в .env или ConfigService
   - Обновить прогресс в Redis не каждые 100 строк, а каждые X секунд (например, throttling)
   - Добавить e2e-тесты (импорт + валидация + сохранение)
   - Использовать gzip-сжатие result.txt, если ошибок много


Заключение:
Реализация устойчива, масштабируема и соответствует production-подходу. Разделение на сервисы, независимая валидация и Redis для отслеживания прогресса делают систему готовой к промышленной эксплуатации.